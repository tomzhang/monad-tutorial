<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
    $LastChangedRevision$
    $LastChangedDate$
-->

<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
    "http://www.oasis-open.org/docbook/xml/4.5CR1/docbookx.dtd">

<sect1 id="Functor" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>What does Functor mean?</title>
  <sect2>
    <title>Terminology</title>
    <para>
      There are many different types of functors; exponential functors, binary functors, contravariant functors,
      covariant functors to name a few. When the term functor is used unqualified, it is safe to assume that the use of
      the term refers to covariant functors. This entire essay concerns itself only with covariant functors (and
      therefore, just <quote>functors</quote>).
    </para>
  </sect2>
  <sect2>
    <title>Funk</title>
    <para>
      Like monad, functor is a computational concept. It is significantly easier to understand than the monad concept.
      It too, is represented by an <quote>interface</quote> or the equivalent for a specific programming language. Also
      like monad, this interface cannot be expressed in type systems such as Java or C#. We will therefore, use these
      languages to provide an introduction to concrete examples (which can be expressed), then move into the interface
      definition using other languages.
    </para>
    <para>
      
    </para>
  </sect2>
  <!-- todo -->
</sect1>

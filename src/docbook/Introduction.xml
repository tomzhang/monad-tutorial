<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
    $LastChangedRevision$
    $LastChangedDate$
-->

<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
    "http://www.oasis-open.org/docbook/xml/4.5CR1/docbookx.dtd">

<sect1 id="Introduction" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Introduction</title>
  <sect2>
    <title>Syntax</title>
    <para>
      This tutorial will use various programming languages, though you needn't be intimately familiar with their
      differences. It is worth noting however, the differences in function signature syntax. Examples are below.
    </para>
    <example>
      <title>A Java function signature</title>
      <programlisting lang="Java">
        &lt;A> int function(String s, A a) {
          ...
        }
      </programlisting>
    </example>
    <example>
      <title>A C# function signature</title>
      <programlisting lang="C#">
        Int Function&lt;A>(String s, A a) {
          ...
        }
      </programlisting>
    </example>
    <example>
      <title>A Scala function signature</title>
      <programlisting lang="Scala">
        def function[A](s: String, a: A): Int =
          ...
      </programlisting>
    </example>
    <example>
      <title>A Haskell function signature</title>
      <programlisting lang="Haskell">
        function :: String -> a -> Int
        function = ...
      </programlisting>
    </example>
  </sect2>
  <sect2>
    <title>Terminology</title>
    <para>
      <emphasis>What is a monad?</emphasis> seems to be the question that is most often put forward by curious
      observers. However, within this question is the implicit assumption of the existence of
      <emphasis>a monad</emphasis> as if it were a thing that has some kind of observable manifestation. Let's not get
      mystical here; an explanation is in order.
    </para>
    <para>
      Consider the example of an interface called <code lang="Java">CharSequence</code> in the standard Java library.
      Here is a shortened version of that interface:
      <example>
        <title><code lang="Java">java.lang.CharSequence</code> (abbreviated)</title>
        <programlisting>
          interface CharSequence {
            char charAt(int index);
            int length();
          }
        </programlisting>
      </example>
      Now suppose someone put forward the question, <emphasis>What is a CharSequence?</emphasis> Notice the potential
      here for equivocation. <quote>Well it's an interface!</quote> might be an appropriate response. A follow-up
      question might be <emphasis>Is a String a CharSequence?</emphasis> Of course, the answer is
      yes, so a <code lang="Java">String</code> is a <code>CharSequence</code> and
      <code lang="Java">CharSequence</code> is an interface, therefore, a <code lang="Java">String</code> is an
      interface. I hope you see the problem here. Attempting to explain this problem might confuse further and give the
      appearance of appealing to vague and vacuous notions.
    </para>
    <para>
      The question <emphasis>What is a monad?</emphasis> is only as meaningful as the question
      <emphasis>What is a CharSequence?</emphasis> Indeed, if Java's type system were flexible enough, one would begin
      by writing: <code lang="Java">interface Monad</code> and we would write suitable implementations of this
      interface and this would provide the answer to <emphasis>What is a Monad?</emphasis>. But let's not get carried
      away just yet.
    </para>
    <para>
      In this essay, we will avoid referring to <emphasis>a monad</emphasis> to avoid this potential for confusion.
      This may seem like a minor point, but there are many implications and pitfalls if this terminology were to be
      maintained. <quote>A monad</quote> so to speak, <emphasis>is an interface</emphasis>. It's just an interface and
      nothing more, which is why it may appear intangible (but it's just an interface!), with a few notable remarks:
      <itemizedlist>
        <listitem>
          <para>
            The Monad interface cannot be expressed using some static type systems because they are too inflexible. Both
            Java and C#<footnote>
              <para>
                Other examples include F#, Visual Basic, OCaml, C.
              </para>
            </footnote> are examples where this is not possible while it is possible using both Haskell and Scala.
          </para>
        </listitem>
        <listitem>
          <para>
            The Monad interface is both fundamental and extremely useful in every-day programming, much more so than the
            typical interfaces that you might find.
          </para>
        </listitem>
        <listitem>
          <para>
            The instances of <code lang="Java">CharSequence</code> usually look rather similar and have a general common
            theme. This can be said about many interfaces. However, the instances for a hypothetical <code>Monad</code>
            interface can look vastly different, even though they all implement the same interface.
          </para> <!-- todo reference/mention that the implementation witnesses the monad which was always there; it doesn't need to implement the interface -->
        </listitem>
      </itemizedlist>
      It is the far-reaching implications and incredible usefulness of the monad interface that takes some effort to
      fully appreciate. So let's do that.
    </para>
  </sect2>
</sect1>
